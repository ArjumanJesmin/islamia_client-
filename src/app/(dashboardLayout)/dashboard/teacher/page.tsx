"use client";

import { useState } from "react";
import DashboardLayout from "../../components/DashboardLayout";
import { StatCard } from "../../components/StartCard";
import { RecentActivity } from "../../components/RecentActivity";
import { QuickActions } from "../../components/QuickActions";
import { ClassManagement } from "../../components/ClassManagement";
import { ClassModal } from "../../components/modals/ClassModal";
import { AttendanceModal } from "../../components/teacher/modals/AttendanceModal"; // Add this import
import { NoticeModal } from "../teacher/components/modal/NoticeModal";
import { useModal } from "../teacher/components/modal/useModal";
import {
  Users,
  BookOpen,
  CheckCircle,
  FileText,
  Bell,
  Plus,
} from "lucide-react";
import { Class } from "../../components/types/admin"

interface Student {
  id: string;
  name: string;
  present: boolean;
}

interface Teacher {
  id: string;
  name: string;
  subject: string;
}

export default function TeacherDashboard() {
  // Modal hooks
  const classModal = useModal();
  const attendanceModal = useModal();
  const assignmentModal = useModal();
  const noticeModal = useModal();
  
  const [editingClass, setEditingClass] = useState<Class | null>(null);
  
  const [classes, setClasses] = useState<Class[]>([
    {
      id: "1",
      name: "‡¶™‡¶û‡ßç‡¶ö‡¶Æ ‡¶ó‡¶£‡¶ø‡¶§",
      subject: "‡¶ó‡¶£‡¶ø‡¶§",
      grade: "‡¶™‡¶û‡ßç‡¶ö‡¶Æ",
      teacherId: "1",
      schedule: "‡¶∏‡ßã‡¶Æ‡¶¨‡¶æ‡¶∞ ‡ßØ:‡ß¶‡ß¶ - ‡ßØ:‡ß™‡ß´",
      students: 30,
      room: "‡ß®‡ß¶‡ßß",
      status: "active"
    },
    {
      id: "2", 
      name: "‡¶ö‡¶§‡ßÅ‡¶∞‡ßç‡¶• ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®",
      subject: "‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®",
      grade: "‡¶ö‡¶§‡ßÅ‡¶∞‡ßç‡¶•",
      teacherId: "1",
      schedule: "‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤‡¶¨‡¶æ‡¶∞ ‡ßß‡ß¶:‡ß©‡ß¶ - ‡ßß‡ßß:‡ßß‡ß´",
      students: 28,
      room: "‡¶≤‡ßç‡¶Ø‡¶æ‡¶¨ ‡ßß‡ß¶‡ßß",
      status: "active"
    }
  ]);

  // Add teachers data
  const [teachers] = useState<Teacher[]>([
    {
      id: "1",
      name: "‡¶ú‡¶®‡¶æ‡¶¨ ‡¶Ü‡¶π‡¶Æ‡ßá‡¶¶",
      subject: "‡¶ó‡¶£‡¶ø‡¶§"
    },
    {
      id: "2",
      name: "‡¶ú‡¶®‡¶æ‡¶¨‡¶æ ‡¶´‡¶æ‡¶§‡ßá‡¶Æ‡¶æ", 
      subject: "‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®"
    }
  ]);

  const [students] = useState<Student[]>([
    { id: "1", name: "‡¶∞‡¶π‡¶ø‡¶Æ ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ", present: true },
    { id: "2", name: "‡¶∏‡ßÅ‡¶Æ‡¶æ‡¶á‡¶Ø‡¶º‡¶æ ‡¶Ü‡¶ï‡ßç‡¶§‡¶æ‡¶∞", present: true },
    { id: "3", name: "‡¶ï‡¶∞‡¶ø‡¶Æ ‡¶â‡¶¶‡ßç‡¶¶‡¶ø‡¶®", present: false },
    { id: "4", name: "‡¶Ü‡¶Ø‡¶º‡ßá‡¶∂‡¶æ ‡¶¨‡ßá‡¶ó‡¶Æ", present: true },
  ]);

  const stats = [
    {
      title: "‡¶Æ‡ßã‡¶ü ‡¶õ‡¶æ‡¶§‡ßç‡¶∞",
      value: "‡ß™‡ß´",
      icon: Users,
      color: "blue" as const,
      change: { value: 3, type: "increase" as const },
    },
    {
      title: "‡¶Æ‡ßã‡¶ü ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏",
      value: `${classes.length}‡¶ü‡¶ø`,
      icon: BookOpen,
      color: "green" as const,
    },
    {
      title: "‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶â‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø",
      value: "‡ßØ‡ß´%",
      icon: CheckCircle,
      color: "purple" as const,
    },
    {
      title: "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶æ‡¶á‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü",
      value: "‡ßß‡ß®‡¶ü‡¶ø",
      icon: FileText,
      color: "orange" as const,
      change: { value: 2, type: "increase" as const },
    },
  ];

  const recentActivities = [
    {
      id: 1,
      title: "‡¶â‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      description: "‡¶™‡¶û‡ßç‡¶ö‡¶Æ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ‡¶∞ ‡¶â‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      time: "‡ßß ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶Ü‡¶ó‡ßá",
      type: "attendance" as const,
      icon: "‚úÖ",
    },
    {
      id: 2,
      title: "‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶æ‡¶á‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü",
      description: "‡¶ó‡¶£‡¶ø‡¶§‡ßá‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶æ‡¶á‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      time: "‡ß© ‡¶ò‡¶®‡ßç‡¶ü‡¶æ ‡¶Ü‡¶ó‡ßá",
      type: "assignment" as const,
      icon: "üìù",
    },
    {
      id: 3,
      title: "‡¶™‡ßç‡¶Ø‡¶æ‡¶∞‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡¶ø‡¶ü‡¶ø‡¶Ç",
      description: "‡¶Ö‡¶≠‡¶ø‡¶≠‡¶æ‡¶¨‡¶ï ‡¶∏‡¶Æ‡¶æ‡¶¨‡ßá‡¶∂‡ßá‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      time: "‡ßß ‡¶¶‡¶ø‡¶® ‡¶Ü‡¶ó‡ßá",
      type: "announcement" as const,
      icon: "üì¢",
    },
    {
      id: 4,
      title: "‡¶Æ‡¶ø‡¶°‡¶ü‡¶æ‡¶∞‡ßç‡¶Æ ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü",
      description: "‡¶Æ‡¶ø‡¶°‡¶ü‡¶æ‡¶∞‡ßç‡¶Æ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá",
      time: "‡ß® ‡¶¶‡¶ø‡¶® ‡¶Ü‡¶ó‡ßá",
      type: "result" as const,
      icon: "üèÜ",
    },
  ];

  const quickActions = [
    {
      title: "‡¶â‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®",
      description: "‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡¶¶‡ßá‡¶∞ ‡¶â‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®",
      icon: CheckCircle,
      onClick: () => attendanceModal.open(),
      color: "green" as const,
    },
    {
      title: "‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø",
      description: "‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®",
      icon: Plus,
      onClick: () => {
        setEditingClass(null);
        classModal.open();
      },
      color: "blue" as const,
    },
    {
      title: "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶æ‡¶á‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø",
      description: "‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶æ‡¶á‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®",
      icon: FileText,
      onClick: () => alert('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶æ‡¶á‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶ü‡¶ø ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶∏‡¶õ‡ßá!'), // Temporary
      color: "orange" as const,
    },
    {
      title: "‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶¶‡¶ø‡¶®",
      description: "‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®",
      icon: Bell,
      onClick: () => noticeModal.open(),
      color: "purple" as const,
    },
  ];

  // Class CRUD operations
  const handleClassCreate = (classData: Omit<Class, 'id'>) => {
    const newClass = {
      ...classData,
      id: Date.now().toString(),
    };
    setClasses(prev => [...prev, newClass]);
  };

  const handleClassUpdate = (id: string, classData: Omit<Class, 'id'>) => {
    setClasses(prev => prev.map(cls => 
      cls.id === id ? { ...classData, id } : cls
    ));
  };

  const handleClassDelete = (id: string) => {
    if (confirm("‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶è‡¶á ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡¶ü‡¶ø ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?")) {
      setClasses(prev => prev.filter(cls => cls.id !== id));
    }
  };

  const handleClassEdit = (classItem: Class) => {
    setEditingClass(classItem);
    classModal.open();
  };

  const handleClassSubmit = (classData: Omit<Class, 'id'>) => {
    if (editingClass) {
      handleClassUpdate(editingClass.id, classData);
    } else {
      handleClassCreate(classData);
    }
  };

  // Attendance handler
  const handleAttendanceSubmit = (attendanceData: { studentId: string; present: boolean }[]) => {
    console.log('Attendance submitted:', attendanceData);
    alert('‡¶â‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!');
  };

  // Notice handler
  const handleNoticeSubmit = (noticeData: {
    title: string;
    message: string;
    priority: 'low' | 'medium' | 'high';
  }) => {
    console.log('Notice published:', noticeData);
    alert('‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂‡¶ø‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!');
  };

  return (
    <DashboardLayout>
      <div className="space-y-4 sm:space-y-6">
        {/* Welcome Banner */}
        <div className="bg-gradient-to-r from-school-primary to-school-secondary rounded-2xl p-4 sm:p-6 text-white">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div className="flex-1">
              <h1 className="text-xl sm:text-2xl md:text-3xl font-bold">
                ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ, ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞! üë®‚Äçüè´
              </h1>
              <p className="text-blue-100 mt-2 text-sm sm:text-base">
                ‡¶Ü‡¶ú ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ {classes.length}‡¶ü‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ü‡¶õ‡ßá‡•§ {stats[0].value} ‡¶ú‡¶® ‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßá‡¶∞ ‡¶â‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
              </p>
            </div>
            <div className="bg-white/20 backdrop-blur-sm rounded-lg p-3 sm:p-4 min-w-[140px]">
              <p className="text-sm">‡¶Æ‡ßã‡¶ü ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º</p>
              <p className="text-lg sm:text-xl font-bold">‡¶ó‡¶£‡¶ø‡¶§, ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶®</p>
            </div>
          </div>
        </div>

        {/* Stats Grid */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6">
          {stats.map((stat, index) => (
            <StatCard
              key={index}
              title={stat.title}
              value={stat.value}
              icon={stat.icon}
              color={stat.color}
              change={stat.change}
            />
          ))}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6">
          {/* Quick Actions */}
          <div className="lg:col-span-1">
            <QuickActions actions={quickActions} />
          </div>

          {/* Recent Activities */}
          <div className="lg:col-span-2">
            <RecentActivity activities={recentActivities} />
          </div>
        </div>

        {/* Class Management */}
        <ClassManagement
          classes={classes}
          onClassCreate={handleClassCreate}
          onClassUpdate={handleClassUpdate}
          onClassDelete={handleClassDelete}
          onClassEdit={handleClassEdit}
        />

        {/* Reusable Modals */}
        <ClassModal
          isOpen={classModal.isOpen}
          onClose={classModal.close}
          onSubmit={handleClassSubmit}
          classItem={editingClass}
          teachers={teachers} // Add teachers prop
          title={editingClass ? '‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶è‡¶°‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®' : '‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®'}
        />

        <AttendanceModal
          isOpen={attendanceModal.isOpen}
          onClose={attendanceModal.close}
          onSubmit={handleAttendanceSubmit}
          students={students}
          title="‡¶â‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§‡¶ø ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®"
        />

        <NoticeModal
          isOpen={noticeModal.isOpen}
          onClose={noticeModal.close}
          onSubmit={handleNoticeSubmit}
          title="‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡ßã‡¶ü‡¶ø‡¶∂ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®"
        />
      </div>
    </DashboardLayout>
  );
}