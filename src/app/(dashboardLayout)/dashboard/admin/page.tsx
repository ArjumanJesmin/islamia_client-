"use client";

import { useState } from "react";
import { OverviewTab } from "../../components/tabs/OverviewTab";
import { TeacherManagement } from "../../components/TeacherManagement";
import { StudentManagement } from "../../components/StudentManagement";
import { ClassManagement } from "../../components/ClassManagement";
import { Teacher, Student, Class } from "../../components/types/admin";

export default function AdminDashboard() {
  const [activeTab, setActiveTab] = useState<'overview' | 'teachers' | 'students' | 'classes'>('overview');
  
  const [teachers, setTeachers] = useState<Teacher[]>([
    {
      id: "1",
      name: "ржЬржирж╛ржм ржЖрж╣ржорзЗржж",
      email: "ahmed@school.com",
      phone: "рзжрззрзнрззрзирзйрзкрзлрзмрзнрзо",
      subject: "ржЧржгрж┐ржд",
      joinDate: "рзирзжрзирзй-рзжрзз-рззрзл",
      status: "active",
      classes: ["ржкржЮрзНржЪржо ржП", "рж╖рж╖рзНржа ржмрж┐"]
    },
    {
      id: "2",
      name: "ржЬржирж╛ржмрж╛ ржлрж╛рждрзЗржорж╛",
      email: "fatema@school.com", 
      phone: "рзжрззрзорзпрзорзнрзмрзлрзкрзйрзи",
      subject: "ржмрж┐ржЬрзНржЮрж╛ржи",
      joinDate: "рзирзжрзирзй-рзжрзи-рзирзж",
      status: "active",
      classes: ["ржЪрждрзБрж░рзНрже рж╕рж┐", "ржкржЮрзНржЪржо ржмрж┐"]
    }
  ]);

  const [students, setStudents] = useState<Student[]>([
    {
      id: "1",
      name: "рж░рж╣рж┐ржо ржЗрж╕рж▓рж╛ржо",
      email: "rahim@student.com",
      phone: "рзжрззрзнрззрззрззрззрззрззрззрзз",
      grade: "ржкржЮрзНржЪржо",
      rollNumber: "рзлрзжрзз",
      parentName: "ржХрж░рж┐ржо ржЗрж╕рж▓рж╛ржо",
      parentPhone: "рзжрззрзнрзирзирзирзирзирзирзирзи",
      address: "рззрзирзй/ржХ, ржЧрзНрж░рзАржи рж░рзЛржб, ржврж╛ржХрж╛",
      status: "active"
    },
    {
      id: "2",
      name: "рж╕рзБржорж╛ржЗржпрж╝рж╛ ржЖржХрзНрждрж╛рж░",
      email: "sumaiya@student.com",
      phone: "рзжрззрзорзйрзйрзйрзйрзйрзйрзйрзй",
      grade: "ржЪрждрзБрж░рзНрже",
      rollNumber: "рзкрзжрзи",
      parentName: "ржЖржмрзНржжрзБрж▓ ржЖржХрзНрждрж╛рж░",
      parentPhone: "рзжрззрзпрзкрзкрзкрзкрзкрзкрзкрзк",
      address: "рзкрзлрзм/ржЦ, ржорж┐рж░ржкрзБрж░, ржврж╛ржХрж╛",
      status: "active"
    }
  ]);

  const [classes, setClasses] = useState<Class[]>([
    {
      id: "1",
      name: "ржкржЮрзНржЪржо ржЧржгрж┐ржд",
      subject: "ржЧржгрж┐ржд",
      grade: "ржкржЮрзНржЪржо",
      teacherId: "1",
      schedule: "рж╕рзЛржоржмрж╛рж░ рзп:рзжрзж - рзп:рзкрзл",
      students: 30,
      room: "рзирзжрзз",
      status: "active"
    },
    {
      id: "2",
      name: "ржЪрждрзБрж░рзНрже ржмрж┐ржЬрзНржЮрж╛ржи", 
      subject: "ржмрж┐ржЬрзНржЮрж╛ржи",
      grade: "ржЪрждрзБрж░рзНрже",
      teacherId: "2",
      schedule: "ржоржЩрзНржЧрж▓ржмрж╛рж░ рззрзж:рзйрзж - рззрзз:рззрзл",
      students: 28,
      room: "рж▓рзНржпрж╛ржм рззрзжрзз",
      status: "active"
    }
  ]);

  // Teacher CRUD operations
  const handleTeacherCreate = (teacherData: Omit<Teacher, 'id'>) => {
    const newTeacher = {
      ...teacherData,
      id: Date.now().toString(),
    };
    setTeachers(prev => [...prev, newTeacher]);
  };

  const handleTeacherUpdate = (id: string, teacherData: Omit<Teacher, 'id'>) => {
    setTeachers(prev => prev.map(teacher => 
      teacher.id === id ? { ...teacherData, id } : teacher
    ));
  };

  const handleTeacherDelete = (id: string) => {
    if (confirm("ржЖржкржирж┐ ржХрж┐ ржПржЗ рж╢рж┐ржХрзНрж╖ржХржХрзЗ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ ржЪрж╛ржи?")) {
      setTeachers(prev => prev.filter(teacher => teacher.id !== id));
    }
  };

  // Student CRUD operations
  const handleStudentCreate = (studentData: Omit<Student, 'id'>) => {
    const newStudent = {
      ...studentData,
      id: Date.now().toString(),
    };
    setStudents(prev => [...prev, newStudent]);
  };

  const handleStudentUpdate = (id: string, studentData: Omit<Student, 'id'>) => {
    setStudents(prev => prev.map(student => 
      student.id === id ? { ...studentData, id } : student
    ));
  };

  const handleStudentDelete = (id: string) => {
    if (confirm("ржЖржкржирж┐ ржХрж┐ ржПржЗ ржЫрж╛рждрзНрж░ржХрзЗ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ ржЪрж╛ржи?")) {
      setStudents(prev => prev.filter(student => student.id !== id));
    }
  };

  // Class CRUD operations
  const handleClassCreate = (classData: Omit<Class, 'id'>) => {
    const newClass = {
      ...classData,
      id: Date.now().toString(),
    };
    setClasses(prev => [...prev, newClass]);
  };

  const handleClassUpdate = (id: string, classData: Omit<Class, 'id'>) => {
    setClasses(prev => prev.map(cls => 
      cls.id === id ? { ...classData, id } : cls
    ));
  };

  const handleClassDelete = (id: string) => {
    if (confirm("ржЖржкржирж┐ ржХрж┐ ржПржЗ ржХрзНрж▓рж╛рж╕ржЯрж┐ ржбрж┐рж▓рж┐ржЯ ржХрж░рждрзЗ ржЪрж╛ржи?")) {
      setClasses(prev => prev.filter(cls => cls.id !== id));
    }
  };

  return (
      <div className="space-y-4 sm:space-y-6">
        {/* Welcome Banner */}
        <div className="bg-gradient-to-r from-school-primary to-school-secondary rounded-2xl p-4 sm:p-6 text-white">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div className="flex-1">
              <h1 className="text-xl sm:text-2xl md:text-3xl font-bold">
                ржЕрзНржпрж╛ржбржорж┐ржи ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб ЁЯСитАНЁЯТ╝
              </h1>
              <p className="text-blue-100 mt-2 text-sm sm:text-base">
                рж╕рзНржХрзБрж▓ ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ рж╕рж┐рж╕рзНржЯрзЗржорзЗ рж╕рзНржмрж╛ржЧрждржоред рж╢рж┐ржХрзНрж╖ржХ, ржЫрж╛рждрзНрж░ ржПржмржВ ржХрзНрж▓рж╛рж╕ ржорзНржпрж╛ржирзЗржЬ ржХрж░рзБржиред
              </p>
            </div>
            <div className="bg-white/20 backdrop-blur-sm rounded-lg p-3 sm:p-4 min-w-[140px]">
              <p className="text-sm">рж╕ржХрзНрж░рж┐ржпрж╝ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА</p>
              <p className="text-lg sm:text-xl font-bold">
                {teachers.length + students.length}
              </p>
            </div>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="bg-card rounded-2xl border border-border p-4">
          <div className="flex flex-wrap gap-2">
            <button
              onClick={() => setActiveTab('overview')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors duration-200 ${
                activeTab === 'overview'
                  ? 'bg-school-primary text-white'
                  : 'bg-accent text-foreground hover:bg-accent/80'
              }`}
            >
              ржУржнрж╛рж░ржнрж┐ржЙ
            </button>
            <button
              onClick={() => setActiveTab('teachers')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors duration-200 ${
                activeTab === 'teachers'
                  ? 'bg-school-primary text-white'
                  : 'bg-accent text-foreground hover:bg-accent/80'
              }`}
            >
              рж╢рж┐ржХрзНрж╖ржХ ({teachers.length})
            </button>
            <button
              onClick={() => setActiveTab('students')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors duration-200 ${
                activeTab === 'students'
                  ? 'bg-school-primary text-white'
                  : 'bg-accent text-foreground hover:bg-accent/80'
              }`}
            >
              ржЫрж╛рждрзНрж░ ({students.length})
            </button>
            <button
              onClick={() => setActiveTab('classes')}
              className={`px-4 py-2 rounded-lg font-medium transition-colors duration-200 ${
                activeTab === 'classes'
                  ? 'bg-school-primary text-white'
                  : 'bg-accent text-foreground hover:bg-accent/80'
              }`}
            >
              ржХрзНрж▓рж╛рж╕ ({classes.length})
            </button>
          </div>
        </div>

        {/* Overview Tab */}
        {activeTab === 'overview' && (
          <OverviewTab 
            teachers={teachers}
            students={students}
            classes={classes}
          />
        )}

        {/* Teachers Tab */}
        {activeTab === 'teachers' && (
          <TeacherManagement
            teachers={teachers}
            onTeacherCreate={handleTeacherCreate}
            onTeacherUpdate={handleTeacherUpdate}
            onTeacherDelete={handleTeacherDelete}
          />
        )}

        {/* Students Tab */}
        {activeTab === 'students' && (
          <StudentManagement
            students={students}
            onStudentCreate={handleStudentCreate}
            onStudentUpdate={handleStudentUpdate}
            onStudentDelete={handleStudentDelete}
          />
        )}

        {/* Classes Tab */}
        {activeTab === 'classes' && (
          <ClassManagement
            classes={classes}
            teachers={teachers}
            onClassCreate={handleClassCreate}
            onClassUpdate={handleClassUpdate}
            onClassDelete={handleClassDelete}
          />
        )}
      </div>
  );
}