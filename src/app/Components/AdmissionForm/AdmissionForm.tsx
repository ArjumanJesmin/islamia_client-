// components/AdmissionForm.tsx
"use client";

import { useState } from "react";
import { Controller, useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import {
  CalendarIcon,
  Upload,
  User,
  Phone,
  MapPin,
  BookOpen,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../../../components/ui/select";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "../../../components/ui/popover";
import { GradientText } from "../ui/gradient-text";
import { cn } from "@/lib/utils";

// Import the form components
import {
  Form,
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "./form";



// Validation Schema
const admissionFormSchema = z.object({
  studentName: z.string().min(2, "‡¶õ‡¶æ‡¶§‡ßç‡¶∞/‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá"),
  fatherName: z.string().min(2, "‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá"),
  motherName: z.string().min(2, "‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ß® ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá"),
  dateOfBirth: z.date(),
  gender: z.string().min(1, "‡¶≤‡¶ø‡¶ô‡ßç‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®"),
  className: z.string().min(1, "‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®"),
  address: z.string().min(10, "‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßß‡ß¶ ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá"),
  phone: z.string()
    .min(11, "‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡ßß‡ßß ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá")
    .max(11, "‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ßß‡ßß ‡¶°‡¶ø‡¶ú‡¶ø‡¶ü ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá")
    .regex(/^01[3-9]\d{8}$/, "‡¶∏‡¶†‡¶ø‡¶ï ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®"),
  email: z.string().email("‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶¶‡¶ø‡¶®").optional().or(z.literal("")),
  birthCertificate: z.instanceof(File).optional(),
  photo: z.instanceof(File).optional(),
}).refine((data) => data.dateOfBirth instanceof Date && !isNaN(data.dateOfBirth.getTime()), {
  message: "‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
  path: ["dateOfBirth"],
});

type AdmissionFormValues = z.infer<typeof admissionFormSchema>;

// Simple date formatter without date-fns
const formatDate = (date: Date): string => {
  return date.toLocaleDateString('bn-BD', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

export default function AdmissionForm() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [birthCertificateFile, setBirthCertificateFile] = useState<File | null>(null);
  const [photoFile, setPhotoFile] = useState<File | null>(null);

  const form = useForm<AdmissionFormValues>({
    resolver: zodResolver(admissionFormSchema),
    defaultValues: {
      studentName: "",
      fatherName: "",
      motherName: "",
      phone: "",
      email: "",
      address: "",
      gender: "",
      className: "",
    },
  });

  const onSubmit = async (data: AdmissionFormValues) => {
    setIsSubmitting(true);
    try {
      console.log("Admission Form Data:", data);
      // API call will go here
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      alert("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≠‡¶∞‡ßç‡¶§‡¶ø ‡¶´‡¶∞‡ßç‡¶Æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ú‡¶Æ‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!");
      form.reset();
      setBirthCertificateFile(null);
      setPhotoFile(null);
    } catch (error) {
      console.error("Form submission error:", error);
      alert("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶´‡¶∞‡ßç‡¶Æ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleBirthCertificateChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setBirthCertificateFile(file);
      form.setValue("birthCertificate", file);
    }
  };

  const handlePhotoChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setPhotoFile(file);
      form.setValue("photo", file);
    }
  };

  const classOptions = [
    { value: "FIRST", label: "‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ", description: "‡ß¨-‡ß≠ ‡¶¨‡¶õ‡¶∞" },
    { value: "SECOND", label: "‡¶¶‡ßç‡¶¨‡¶ø‡¶§‡ßÄ‡¶Ø‡¶º ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ", description: "‡ß≠-‡ßÆ ‡¶¨‡¶õ‡¶∞" },
    { value: "THIRD", label: "‡¶§‡ßÉ‡¶§‡ßÄ‡¶Ø‡¶º ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ", description: "‡ßÆ-‡ßØ ‡¶¨‡¶õ‡¶∞" },
    { value: "FOURTH", label: "‡¶ö‡¶§‡ßÅ‡¶∞‡ßç‡¶• ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ", description: "‡ßØ-‡ßß‡ß¶ ‡¶¨‡¶õ‡¶∞" },
    { value: "FIFTH", label: "‡¶™‡¶û‡ßç‡¶ö‡¶Æ ‡¶∂‡ßç‡¶∞‡ßá‡¶£‡ßÄ", description: "‡ßß‡ß¶-‡ßß‡ßß ‡¶¨‡¶õ‡¶∞" },
  ];

  const genderOptions = [
    { value: "MALE", label: "‡¶õ‡ßá‡¶≤‡ßá" },
    { value: "FEMALE", label: "‡¶Æ‡ßá‡¶Ø‡¶º‡ßá" },
    { value: "OTHER", label: "‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø" },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-green-50 dark:from-gray-900 dark:to-green-900/20 py-8 px-4">
      <div className="container max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <GradientText
            variant="primary"
            size="4xl"
            weight="bold"
            align="center"
            responsive
            withLine
            className="mb-6"
          >
            ‡¶≠‡¶∞‡ßç‡¶§‡¶ø ‡¶´‡¶∞‡ßç‡¶Æ
          </GradientText>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            ‡¶á‡¶∏‡¶≤‡¶æ‡¶Æ‡¶ø‡¶Ø‡¶º‡¶æ ‡¶∏‡¶∞‡¶ï‡¶æ‡¶∞‡¶ø ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶¨‡¶ø‡¶¶‡ßç‡¶Ø‡¶æ‡¶≤‡¶Ø‡¶º‡ßá ‡¶≠‡¶∞‡ßç‡¶§‡¶ø‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶Ü‡¶¨‡ßá‡¶¶‡¶® ‡¶´‡¶∞‡ßç‡¶Æ
          </p>
          <div className="mt-4 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg p-4 max-w-2xl mx-auto">
            <p className="text-amber-800 dark:text-amber-200 text-sm font-medium">
              üìÖ ‡¶≠‡¶∞‡ßç‡¶§‡¶ø ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ: ‡ßß‡¶≤‡¶æ ‡¶ú‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø - ‡ß®‡ßÆ‡¶∂‡ßá ‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø
            </p>
          </div>
        </div>

        <Card className="border-0 shadow-2xl rounded-2xl overflow-hidden">
          <CardHeader className="bg-gradient-to-r from-school-primary/10 to-school-secondary/10 text-center py-8">
            <CardTitle className="text-2xl">
              <GradientText variant="secondary" size="2xl" weight="bold" align="center">
                ‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶≠‡¶∞‡ßç‡¶§‡¶ø ‡¶Ü‡¶¨‡ßá‡¶¶‡¶®
              </GradientText>
            </CardTitle>
            <p className="text-muted-foreground mt-2">
              ‡¶∏‡¶ï‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ * ‡¶ö‡¶ø‡¶π‡ßç‡¶®‡¶ø‡¶§ ‡¶´‡¶ø‡¶≤‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï‡•§
            </p>
          </CardHeader>

          <CardContent className="p-6 md:p-8">
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
              {/* Student Information Section */}
              <div className="space-y-6">
                <div className="flex items-center gap-2 mb-4">
                  <User className="h-5 w-5 text-school-primary" />
                  <GradientText variant="primary" size="xl" weight="semibold">
                    ‡¶õ‡¶æ‡¶§‡ßç‡¶∞/‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
                  </GradientText>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {/* Student Name */}
                  <Controller
                    name="studentName"
                    control={form.control}
                    render={({ field, fieldState }) => (
                      <FormItem>
                        <FormLabel className="flex items-center gap-1">
                          <span>‡¶õ‡¶æ‡¶§‡ßç‡¶∞/‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶∞ ‡¶®‡¶æ‡¶Æ *</span>
                        </FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="‡¶õ‡¶æ‡¶§‡ßç‡¶∞/‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®" 
                            {...field} 
                            className="h-12"
                          />
                        </FormControl>
                        {fieldState.error && (
                          <FormMessage>{fieldState.error.message}</FormMessage>
                        )}
                      </FormItem>
                    )}
                  />

                  {/* Date of Birth */}
                  <Controller
                    name="dateOfBirth"
                    control={form.control}
                    render={({ field, fieldState }) => (
                      <FormItem className="flex flex-col">
                        <FormLabel>‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ *</FormLabel>
                        <Popover>
                          <PopoverTrigger asChild>
                            <FormControl>
                              <Button
                                variant={"outline"}
                                className={cn(
                                  "h-12 pl-3 text-left font-normal",
                                  !field.value && "text-muted-foreground"
                                )}
                              >
                                {field.value ? (
                                  formatDate(field.value)
                                ) : (
                                  <span>‡¶ú‡¶®‡ßç‡¶Æ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</span>
                                )}
                                <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                              </Button>
                            </FormControl>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={field.value}
                              onSelect={field.onChange}
                              disabled={(date) =>
                                date > new Date() || date < new Date("1900-01-01")
                              }
                              className="rounded-md border"
                            />
                          </PopoverContent>
                        </Popover>
                        {fieldState.error && (
                          <FormMessage>{fieldState.error.message}</FormMessage>
                        )}
                      </FormItem>
                    )}
                  />

                  {/* Father's Name */}
                  <Controller
                    name="fatherName"
                    control={form.control}
                    render={({ field, fieldState }) => (
                      <FormItem>
                        <FormLabel>‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ *</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="‡¶™‡¶ø‡¶§‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®" 
                            {...field} 
                            className="h-12"
                          />
                        </FormControl>
                        {fieldState.error && (
                          <FormMessage>{fieldState.error.message}</FormMessage>
                        )}
                      </FormItem>
                    )}
                  />

                  {/* Mother's Name */}
                  <Controller
                    name="motherName"
                    control={form.control}
                    render={({ field, fieldState }) => (
                      <FormItem>
                        <FormLabel>‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ *</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="‡¶Æ‡¶æ‡¶§‡¶æ‡¶∞ ‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®" 
                            {...field} 
                            className="h-12"
                          />
                        </FormControl>
                        {fieldState.error && (
                          <FormMessage>{fieldState.error.message}</FormMessage>
                        )}
                      </FormItem>
                    )}
                  />

                  {/* Gender */}
                  <Controller
                    name="gender"
                    control={form.control}
                    render={({ field, fieldState }) => (
                      <FormItem>
                        <FormLabel>‡¶≤‡¶ø‡¶ô‡ßç‡¶ó *</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger className="h-12">
                              <SelectValue placeholder="‡¶≤‡¶ø‡¶ô‡ßç‡¶ó ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {genderOptions.map((option) => (
                              <SelectItem key={option.value} value={option.value}>
                                {option.label}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        {fieldState.error && (
                          <FormMessage>{fieldState.error.message}</FormMessage>
                        )}
                      </FormItem>
                    )}
                  />

                  {/* Class */}
                  <Controller
                    name="className"
                    control={form.control}
                    render={({ field, fieldState }) => (
                      <FormItem>
                        <FormLabel>‡¶≠‡¶∞‡ßç‡¶§‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ *</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger className="h-12">
                              <SelectValue placeholder="‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            {classOptions.map((option) => (
                              <SelectItem key={option.value} value={option.value}>
                                <div className="flex flex-col">
                                  <span>{option.label}</span>
                                  <span className="text-xs text-muted-foreground">
                                    {option.description}
                                  </span>
                                </div>
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                        {fieldState.error && (
                          <FormMessage>{fieldState.error.message}</FormMessage>
                        )}
                      </FormItem>
                    )}
                  />
                </div>
              </div>

              {/* Contact Information Section */}
              <div className="space-y-6 pt-6 border-t border-border">
                <div className="flex items-center gap-2 mb-4">
                  <Phone className="h-5 w-5 text-school-primary" />
                  <GradientText variant="secondary" size="xl" weight="semibold">
                    ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
                  </GradientText>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <Controller
                    name="phone"
                    control={form.control}
                    render={({ field, fieldState }) => (
                      <FormItem>
                        <FormLabel>‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ *</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="01XXXXXXXXX" 
                            {...field} 
                            className="h-12"
                          />
                        </FormControl>
                        {fieldState.error && (
                          <FormMessage>{fieldState.error.message}</FormMessage>
                        )}
                      </FormItem>
                    )}
                  />

                  <Controller
                    name="email"
                    control={form.control}
                    render={({ field, fieldState }) => (
                      <FormItem>
                        <FormLabel>‡¶á‡¶Æ‡ßá‡¶á‡¶≤ (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)</FormLabel>
                        <FormControl>
                          <Input 
                            placeholder="email@example.com" 
                            {...field} 
                            className="h-12"
                            type="email"
                          />
                        </FormControl>
                        {fieldState.error && (
                          <FormMessage>{fieldState.error.message}</FormMessage>
                        )}
                      </FormItem>
                    )}
                  />

                  <Controller
                    name="address"
                    control={form.control}
                    render={({ field, fieldState }) => (
                      <FormItem className="md:col-span-2">
                        <FormLabel className="flex items-center gap-1">
                          <MapPin className="h-4 w-4" />
                          <span>‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ *</span>
                        </FormLabel>
                        <FormControl>
                          <Textarea 
                            placeholder="‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ, ‡¶°‡¶æ‡¶ï‡¶ò‡¶∞, ‡¶•‡¶æ‡¶®‡¶æ, ‡¶ú‡ßá‡¶≤‡¶æ)" 
                            {...field} 
                            className="min-h-[100px] resize-none"
                          />
                        </FormControl>
                        {fieldState.error && (
                          <FormMessage>{fieldState.error.message}</FormMessage>
                        )}
                      </FormItem>
                    )}
                  />
                </div>
              </div>

              {/* Documents Section */}
              <div className="space-y-6 pt-6 border-t border-border">
                <div className="flex items-center gap-2 mb-4">
                  <BookOpen className="h-5 w-5 text-school-primary" />
                  <GradientText variant="primary" size="xl" weight="semibold">
                    ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü
                  </GradientText>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-3">
                    <FormLabel>‡¶ú‡¶®‡ßç‡¶Æ ‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶® ‡¶∏‡¶®‡¶¶ *</FormLabel>
                    <div className="border-2 border-dashed border-border rounded-lg p-6 text-center hover:border-school-primary transition-colors">
                      <Input
                        type="file"
                        accept=".pdf,.jpg,.jpeg,.png"
                        onChange={handleBirthCertificateChange}
                        className="hidden"
                        id="birthCertificate"
                      />
                      <label
                        htmlFor="birthCertificate"
                        className="cursor-pointer flex flex-col items-center gap-2"
                      >
                        <Upload className="h-8 w-8 text-muted-foreground" />
                        <span className="text-sm font-medium">
                          {birthCertificateFile ? birthCertificateFile.name : "‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®"}
                        </span>
                        <span className="text-xs text-muted-foreground">
                          PDF, JPG, PNG (‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ß®MB)
                        </span>
                      </label>
                    </div>
                  </div>

                  <div className="space-y-3">
                    <FormLabel>‡¶õ‡¶æ‡¶§‡ßç‡¶∞/‡¶õ‡¶æ‡¶§‡ßç‡¶∞‡ßÄ‡¶∞ ‡¶õ‡¶¨‡¶ø *</FormLabel>
                    <div className="border-2 border-dashed border-border rounded-lg p-6 text-center hover:border-school-primary transition-colors">
                      <Input
                        type="file"
                        accept=".jpg,.jpeg,.png"
                        onChange={handlePhotoChange}
                        className="hidden"
                        id="photo"
                      />
                      <label
                        htmlFor="photo"
                        className="cursor-pointer flex flex-col items-center gap-2"
                      >
                        <Upload className="h-8 w-8 text-muted-foreground" />
                        <span className="text-sm font-medium">
                          {photoFile ? photoFile.name : "‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®"}
                        </span>
                        <span className="text-xs text-muted-foreground">
                          JPG, PNG (‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡ßßMB)
                        </span>
                      </label>
                    </div>
                  </div>
                </div>
              </div>

              {/* Submit Button */}
              <div className="flex flex-col sm:flex-row gap-4 justify-between items-center pt-6 border-t border-border">
                <p className="text-sm text-muted-foreground text-center sm:text-left">
                  ‡¶´‡¶∞‡ßç‡¶Æ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞{" "}
                  <a href="/terms" className="text-school-primary hover:underline">
                    ‡¶∂‡¶∞‡ßç‡¶§‡¶æ‡¶¨‡¶≤‡ßÄ
                  </a>{" "}
                  ‡¶Æ‡ßá‡¶®‡ßá ‡¶®‡¶ø‡¶ö‡ßç‡¶õ‡ßá‡¶®
                </p>
                
                <Button
                  type="submit"
                  size="lg"
                  disabled={isSubmitting}
                  className="bg-gradient-to-r from-school-primary to-school-secondary hover:from-school-primary/90 hover:to-school-secondary/90 text-white font-semibold px-8 py-3 text-lg min-w-[200px]"
                >
                  {isSubmitting ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      ‡¶ú‡¶Æ‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...
                    </>
                  ) : (
                    "‡¶´‡¶∞‡ßç‡¶Æ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶®"
                  )}
                </Button>
              </div>
            </form>
          </CardContent>
        </Card>

        {/* Additional Information */}
        <div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6 text-center">
          <Card className="border-0 bg-blue-50 dark:bg-blue-900/20">
            <CardContent className="p-6">
              <div className="text-2xl font-bold text-blue-600 mb-2">üìû</div>
              <h3 className="font-semibold mb-2">‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®?</h3>
              <p className="text-sm text-muted-foreground">+‡ßÆ‡ßÆ‡ß¶ ‡ßß‡ß®‡ß©‡ß™-‡ß´‡ß¨‡ß≠‡ßÆ‡ßØ</p>
            </CardContent>
          </Card>

          <Card className="border-0 bg-green-50 dark:bg-green-900/20">
            <CardContent className="p-6">
              <div className="text-2xl font-bold text-green-600 mb-2">üïí</div>
              <h3 className="font-semibold mb-2">‡¶≠‡¶∞‡ßç‡¶§‡¶ø‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º</h3>
              <p className="text-sm text-muted-foreground">‡ßß‡¶≤‡¶æ ‡¶ú‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø - ‡ß®‡ßÆ‡¶∂‡ßá ‡¶´‡ßá‡¶¨‡ßç‡¶∞‡ßÅ‡¶Ø‡¶º‡¶æ‡¶∞‡¶ø</p>
            </CardContent>
          </Card>

          <Card className="border-0 bg-amber-50 dark:bg-amber-900/20">
            <CardContent className="p-6">
              <div className="text-2xl font-bold text-amber-600 mb-2">üìù</div>
              <h3 className="font-semibold mb-2">‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶æ‡¶ó‡¶ú</h3>
              <p className="text-sm text-muted-foreground">‡¶ú‡¶®‡ßç‡¶Æ ‡¶∏‡¶®‡¶¶ ‡¶ì ‡ß® ‡¶ï‡¶™‡¶ø ‡¶õ‡¶¨‡¶ø</p>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
